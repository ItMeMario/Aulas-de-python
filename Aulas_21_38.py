# -*- coding: utf-8 -*-
"""Aulas 21-38.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QYIH1898x6m2ujMWnBcnIYMsrmXDlQJq
"""

def soma(x,y): #X e Y só existem de forma local
 return(x+y) 
def multiplicacao(x,y):
  return x*y
s = soma(2,3) 
m = multiplicacao (3,4)

print(soma(s,m))

#-*- coding: utf-8 -*-
w = open("arquivo2.txt", "w") #cria um arquivo chamado arquivo2.txt

w.write("\n r é somente leitura\n w é sobreescrever\n a é leitura e adicionar a escrita ") #escreve no arquivo

w.close() #fecha o arquivo

minha_lista = ["abacaxi", "melancia", "abacate"]
minha_lista2 = [1,2,3,4,5]
minha_lista3 = ["abacaxi", 2,9.89,True]

print(minha_lista2[3]) #retorna o item 3 da minha lista 2

for item in minha_lista: #retorna os itens da lista
  print(item)

tamanho = len(minha_lista) #retorna o tamanho da lista
print(tamanho)

minha_lista.append("limao") #adiciona limao na lista

for item in minha_lista: #retorna os itens da lista
  print(item)

if 7 in minha_lista2:
  print("7 está na lista")
else: 
    print("ele não está na lista")

del minha_lista[1] #deleta o item 1 da lista
print(minha_lista)

#-*- coding: utf-8 -*-
minha_lista = ["abacaxi", "melancia", "abacate"]
minha_lista2 = [1,2,3,4,5]
minha_lista3 = ["abacaxi",2,9.89,True]
minha_lista4 = []
tamanho = len(minha_lista) #armazena o tamanho da lista
print(minha_lista[2]) #imprimi o item 2 da minha_lista

for item in minha_lista: #print de todos os itens da lista
  print(item)

minha_lista.append("limao") #adiciona limão na lista

if 3 in minha_lista2:
  print("3 está na lista")

del minha_lista[2:]
print (minha_lista)

minha_lista4.append(57)
print(minha_lista4)

lista = [124,345,72,46,6,7,3,1,7,0]
lista2 = ["bola","abacate","dinheiro"]

#lista.sort() #ordena a lista do menor para o maior com o método sort

#lista = sorted(lista) #função para ordernar do menor para maior

lista.sort(reverse=True) #método reverte 
print(lista)
lista2.sort(reverse=True)
print(lista2)

"""Em Python, dicionários são arrays associativos, ou seja, um determinado valor passa a ser vinculado a uma chave. Exemplo:

# dicionarios em python
dicionario_sites = {"Diego": "diegomariano.com"}

No dicionário acima, a chave "Diego" foi vinculado ao valor "diegomariano.com". Assim, para imprimir o valor chame:

print(dicionario_sites['Diego'])
# Sera impresso "diegomariano.com

# dicionarios em python
dicionario_sites = {"Diego": "diegomariano.com", "Google": "google.com", "Udemy": "udemy.com"}
 
for chave in dicionario_sites:
    print(dicionario_sites[chave])
"""

meu_dicionario = {"A":"AMEIXA","B":"BOLA","C":"CACHORRO"}

print(meu_dicionario["C"]) 

'''
listar as chaves e os itens de forma concatenada
for chave in meu_dicionario:
  print(chave+"-"+meu_dicionario[chave]) 
  
'''
for i in meu_dicionario.values():
  print(i)

import random # função que trás um número aleatório

#random.seed(1) # define o número que vai aparecer
#numero = random.randint(0, 10) # cria uma lista com números entre 0-10
#print(numero)
lista = [6,45,9]
numero = random.choice(lista)
print(numero)

a=2
b=0

try: print(a/b) #"try" palavra reservada para tratamento de excessões, tentar realizar a operação caso contrário print("Não deu")
except: print("Não deu")
print(a/a)

"""1 - Faça um programa que receba a idade do usuário e diga se ele é maior ou menor de idade.   

2- Faça um programa que receba duas notas digitadas pelo usuário. Se a nota for maior ou igual a seis, escreva aprovado, senão escreva reprovado.   



"""

idade = int(input("Digite sua idade: "))
 
if idade >= 18:
    print("Maior de idade")
elif idade < 18:
    print("Menor de idade")

nota1 = int(input("Digite a primeira nota: "))

nota2 = int(input("Digite a segunda nota: "))

media = (nota1+nota2)/2

if media >=6:
  print("aprovado")
else: print("reporvado")

#"list comprehension" que cria uma nova lista a partir de outra.
x= [1,2,3,4,5]

y= [i**2 for i in x] # y vai receber i elevado ao quadrado que é obtido pelo for

z= [i for i in x if i%2==1] # z vai receber i apenas contém números ímpares 

print("Usando list comprehension")
print(x)
print(y)
print(z)

#Função Enumerate

lista = ["abacate", "bola", "cachorro"]

for i, nome in enumerate(lista):
  print(i, nome)

#Função map

def dobro(x): 
 return x*2 #função para retornar o dobro do valor

valor = [1,2,3,4,5] 

valor_dobrado = map(dobro, valor)  #aplica uma função especificada a cada item de uma ou mais sequências e retorna um objeto "map" que contém os resultados.

valor_dobrado = list(valor_dobrado)
print(valor_dobrado)

#função reduce. A função reduce é usada para reduzir uma sequência de valores a um único valor aplicando repetidamente uma operação binária (que recebe dois argumentos) a pares consecutivos de elementos na sequência
from functools import reduce 

def soma(x,y):
  return x+y

lista = [1,3,5,10,20]

soma = reduce(soma, lista)

print(soma)

#função zip

lista1 = [1,2,3,4,5]
lista2 = ["abacate", "bola", "cachorro", "dinheiro", "elefante"]
lista3 = ["R$ 2,00", "R$ 5,00", "Não tem preço", "Não tem preço", "Não tem preço"]

for numero, nome, valor in zip(lista1, lista2, lista3):
  print(numero, nome, valor)